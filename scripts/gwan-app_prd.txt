# Overview  
O projeto **GWAN BFF** √© um backend modular e escal√°vel baseado em Clean Architecture, voltado para orquestrar chatbots com IA, processamento de documentos e integra√ß√£o com servi√ßos externos. Ele resolve a necessidade de uma API robusta para gest√£o de usu√°rios, perfis, chatbots e bases de conhecimento, tudo com execu√ß√£o ass√≠ncrona via workers. √â voltado para equipes t√©cnicas que desenvolvem automa√ß√µes inteligentes e interfaces conversacionais.

**Estado Atual**: Projeto em fase de planejamento e especifica√ß√£o t√©cnica. Ambiente de desenvolvimento e estrutura base a serem criados.

# Core Features Planejadas  

## üìã Autentica√ß√£o e Registro (Fluxo sem Senha)
- [ ] **Registro Simplificado**: Usu√°rio informa nome, email e WhatsApp (sem senha)
- [ ] **Ativa√ß√£o por Email**: Sistema envia c√≥digo de 6 d√≠gitos via email
- [ ] **Confirma√ß√£o de Ativa√ß√£o**: Usu√°rio envia email + c√≥digo para ativar conta
- [ ] **Login por C√≥digo**: A cada login, usu√°rio informa email e recebe c√≥digo por email
- [ ] **Autentica√ß√£o Final**: Usu√°rio envia email + c√≥digo e recebe token JWT
- [ ] **Value Objects**: Email e WhatsApp com valida√ß√µes espec√≠ficas
- [ ] **Sistema de Notifica√ß√µes**: Email para c√≥digos e WhatsApp para notifica√ß√µes opcionais

### Fluxo Detalhado de Autentica√ß√£o

#### Registro de Novo Usu√°rio
1. **POST /auth/register** - Usu√°rio envia:
   ```json
   {
     "name": "Jo√£o Silva",
     "email": "joao@exemplo.com", 
     "whatsapp": "+5511999999999"
   }
   ```
2. **Sistema gera c√≥digo** de ativa√ß√£o de 6 d√≠gitos
3. **Email enviado** automaticamente via worker
4. **Resposta**: Confirma√ß√£o de envio (sem dados sens√≠veis)

#### Ativa√ß√£o de Conta
5. **POST /auth/activate** - Usu√°rio envia:
   ```json
   {
     "email": "joao@exemplo.com",
     "code": "123456"
   }
   ```
6. **Sistema valida** c√≥digo e ativa conta
7. **Resposta**: Confirma√ß√£o de ativa√ß√£o

#### Login (A Cada Acesso)
8. **POST /auth/login** - Usu√°rio envia apenas email:
   ```json
   {
     "email": "joao@exemplo.com"
   }
   ```
9. **Sistema gera c√≥digo** de login de 6 d√≠gitos
10. **Email enviado** automaticamente via worker
11. **Resposta**: Confirma√ß√£o de envio

#### Verifica√ß√£o e Token
12. **POST /auth/verify-login** - Usu√°rio envia:
    ```json
    {
      "email": "joao@exemplo.com",
      "code": "654321"
    }
    ```
13. **Sistema valida** c√≥digo e gera tokens
14. **Resposta**: Token de acesso + dados do usu√°rio
    ```json
    {
      "accessToken": "jwt...",
      "refreshToken": "jwt...",
      "user": { /* dados do usu√°rio */ }
    }
    ```

## üìã Gest√£o de Chatbots
- [ ] CRUD completo de chatbots com configura√ß√µes avan√ßadas
- [ ] Integra√ß√£o com OpenAI (GPT-3.5/4) para respostas inteligentes
- [ ] Configura√ß√µes personaliz√°veis: modelo, temperatura, max tokens, prompt system
- [ ] Vincula√ß√£o com bases de conhecimento para respostas contextualizadas
- [ ] Sistema de conversas persistidas com hist√≥rico

## üìã Base de Conhecimento (Knowledge Base)

### Fluxo Detalhado de Knowledge Base

#### Cria√ß√£o de Base de Conhecimento
1. **POST /user/knowledge-base** - Usu√°rio logado cria base informando:
   ```json
   {
     "name": "Base de Suporte T√©cnico",
     "description": "Base contendo manuais e documenta√ß√£o t√©cnica"
   }
   ```
2. **Sistema cria** registro no MongoDB
3. **Resposta**: Dados da base criada com ID

#### Upload de Arquivo  
4. **POST /user/files/upload** - Upload de arquivo para MinIO:
   ```
   Content-Type: multipart/form-data
   - file: [PDF File] (m√°ximo 5MB)
   - knowledgeBaseId: "507f1f77bcf86cd799439011"
   ```
5. **Arquivo salvo** no bucket MinIO organizado por usu√°rio
6. **Metadados salvos** no MongoDB
7. **Resposta**: Dados do arquivo com fileId

#### Listagem e Consulta
8. **GET /user/knowledge-base** - Lista todas as bases do usu√°rio
9. **GET /user/knowledge-base/:id** - Busca base espec√≠fica por ID

#### Processamento Ass√≠ncrono
10. **POST /user/knowledge-base/:id/start-process** - Inicia processamento:
    ```json
    {
      "fileId": "507f1f77bcf86cd799439014"
    }
    ```
11. **Sistema envia** para fila RabbitMQ:
    ```json
    {
      "userId": "507f1f77bcf86cd799439012",
      "knowledgeBaseId": "507f1f77bcf86cd799439011", 
      "fileId": "507f1f77bcf86cd799439014"
    }
    ```
12. **Knowledge Worker** processa arquivo
13. **Status atualizado** no MongoDB: processing ‚Üí completed/failed

#### Exclus√£o
14. **DELETE /user/files/:fileId** - Remove arquivo do MinIO e base
15. **Sistema remove** arquivo do bucket
16. **Sistema remove** metadados do MongoDB
17. **Sistema atualiza** contadores da base de conhecimento

### Funcionalidades T√©cnicas
- [ ] **CRUD de Bases**: Criar, listar, buscar e excluir bases de conhecimento
- [ ] **Upload MinIO**: Upload de documentos PDF para bucket por usu√°rio
- [ ] **Processamento Ass√≠ncrono**: Fila RabbitMQ para processamento de documentos
- [ ] **Indexa√ß√£o Sem√¢ntica**: Gera√ß√£o de embeddings via OpenAI
- [ ] **Sistema de Chunking**: Divis√£o de documentos longos em chunks
- [ ] **Status Tracking**: Acompanhamento do status de processamento
- [ ] **MongoDB + Mongoose**: Armazenamento de metadados e rela√ß√µes
- [ ] **Organiza√ß√£o Hier√°rquica**: Arquivos organizados por usu√°rio no MinIO

## üìã Orquestra√ß√£o com Workers RabbitMQ
- [ ] **Email Worker**: Processamento de emails de verifica√ß√£o, notifica√ß√µes e recupera√ß√£o de senha
- [ ] **Chatbot Worker**: Processamento de mensagens, treinamento e gera√ß√£o de embeddings
- [ ] **Knowledge Worker**: Processamento de documentos, indexa√ß√£o e embedding generation
- [ ] Sistema de retry com dead-letter queues
- [ ] Monitoramento de filas e m√©tricas de performance

## üìã Gest√£o de Usu√°rios e Perfis
- [ ] Sistema completo de perfis de usu√°rio
- [ ] Configura√ß√µes de prefer√™ncias (notifica√ß√µes, idioma)
- [ ] M√≥dulo administrativo para gest√£o de usu√°rios
- [ ] Controle de pap√©is (user, admin, manager)
- [ ] APIs para CRUD completo de usu√°rios

## üìã Armazenamento de Arquivos MinIO
- [ ] Integra√ß√£o completa com MinIO para armazenamento de PDFs
- [ ] URLs tempor√°rias com expira√ß√£o (24h)
- [ ] Organiza√ß√£o hier√°rquica por usu√°rio
- [ ] Sistema de backup e versionamento
- [ ] Metadados completos em MongoDB

## üìã Observabilidade e Monitoramento
- [ ] Logs estruturados em JSON com rota√ß√£o
- [ ] Health checks para todos os servi√ßos
- [ ] M√©tricas de performance por endpoint
- [ ] Monitoramento de workers e filas RabbitMQ
- [ ] Rastreamento de erros e retries
- [ ] Documenta√ß√£o Swagger completa

# User Experience Planejada

- **User Personas**:
  - üìã Administrador de sistema (m√≥dulo admin)
  - üìã Desenvolvedor frontend/API consumer (API REST)
  - üìã Operador de chatbot/IA (interface de gest√£o)

- **Key Flows a Implementar**:
  1. [ ] **Registro Simplificado**: Usu√°rio informa nome, email e WhatsApp (sem senha)
  2. [ ] **Ativa√ß√£o por Email**: Usu√°rio recebe c√≥digo e ativa conta
  3. [ ] **Login por C√≥digo**: A cada login, usu√°rio informa email e recebe c√≥digo por email
  4. [ ] **Autentica√ß√£o com Token**: Usu√°rio envia c√≥digo e recebe token de acesso
  5. [ ] **Cria√ß√£o de Base**: Usu√°rio cria base de conhecimento (nome + descri√ß√£o)
  6. [ ] **Upload de Arquivo**: Upload de PDF para MinIO vinculado √† base
  7. [ ] **Listagem de Bases**: Usu√°rio lista todas suas bases de conhecimento
  8. [ ] **Consulta por ID**: Usu√°rio busca base espec√≠fica por ID
  9. [ ] **Iniciar Processamento**: API start-process envia dados para RabbitMQ
  10. [ ] **Processamento Worker**: Knowledge Worker processa arquivo e gera embeddings
  11. [ ] **Exclus√£o de Arquivo**: Remove arquivo do MinIO e metadados do MongoDB
  12. [ ] **Cria√ß√£o de Chatbot**: Cria√ß√£o de chatbot vinculado √† base de conhecimento
  13. [ ] **Respostas Contextualizadas**: Chatbot responde com base nos documentos processados
  14. [ ] **Sistema de Conversas**: Sistema de conversas com hist√≥rico persistido
  15. [ ] **Monitoramento**: Monitoramento em tempo real via logs estruturados

- **UI/UX Considerations a Implementar**:
  - [ ] API-first: 30+ endpoints REST autenticados documentados
  - [ ] Swagger UI completa em `/api/docs`
  - [ ] Sistema de status para acompanhamento de processamento
  - [ ] URLs tempor√°rias para download seguro de arquivos
  - [ ] Sistema de notifica√ß√µes multi-canal

# Technical Architecture a Implementar

## üìã Camadas Clean Architecture
- **Domain**: Entidades User, Chatbot, KnowledgeBase, Document com regras de neg√≥cio
- **Application**: 15+ use cases (RegisterUser, CreateChatbot, ProcessDocument, etc.)
- **Infrastructure**: Integra√ß√£o com MongoDB, SMTP, RabbitMQ, MinIO, OpenAI
- **Presentation**: API REST NestJS com 30+ controllers autenticados

## üìã Workers RabbitMQ
- `email.notification`, `email.verification`, `email.password-reset`
- `chatbot.message`, `chatbot.training`, `chatbot.embedding`
- `knowledge.document`, `knowledge.indexing`, `knowledge.embedding`
- Sistema de retry, dead-letter e m√©tricas

## üìã Data Models a Implementar (MongoDB + Mongoose)
- `User` (nome, email, whatsapp, status de ativa√ß√£o, c√≥digos tempor√°rios)
- `KnowledgeBase` (userId, name, description, status, fileCount, createdAt, updatedAt)
- `File` (userId, knowledgeBaseId, filename, originalName, size, mimeType, bucketPath, status)
- `Document` (fileId, chunks, embeddings, processedAt, metadata)
- `Chatbot` (userId, knowledgeBaseId, configura√ß√µes e IA)
- `Conversation` e `Message` (hist√≥rico de conversas)
- `VerificationCode` (c√≥digos tempor√°rios de ativa√ß√£o e login)
- `UserSession` (sess√µes ativas e tokens JWT)
- `ProcessingQueue` (userId, knowledgeBaseId, fileId, status, attempts)

## üìã Infraestrutura a Configurar
- [ ] MongoDB 6+ (usu√°rios, bots, knowledge, conversas)
- [ ] MinIO (documentos com URLs tempor√°rias)
- [ ] Redis (cache e locks distribu√≠dos)
- [ ] RabbitMQ (filas com monitoramento)
- [ ] OpenAI API (embeddings e chat completion)
- [ ] Docker + Portainer (containeriza√ß√£o)
- [ ] Logs estruturados + Health checks

# Development Roadmap

## üöÄ Fase 1 ‚Äì Setup e Base (2-3 semanas)
- [ ] Configura√ß√£o do ambiente de desenvolvimento
- [ ] Inicializa√ß√£o do projeto NestJS com TypeScript
- [ ] Configura√ß√£o Docker Compose para desenvolvimento
- [ ] Setup MongoDB + Redis + RabbitMQ + MinIO
- [ ] Estrutura base Clean Architecture
- [ ] Configura√ß√£o de linting, formatting e testes
- [ ] CI/CD b√°sico com GitHub Actions
- [ ] Documenta√ß√£o inicial do projeto

## üìã Fase 2 ‚Äì Autentica√ß√£o e Core (3-4 semanas)
- [ ] **Sistema Autentica√ß√£o sem Senha**
  - [ ] Value Objects (Email, WhatsApp)
  - [ ] Registro com nome, email e WhatsApp
  - [ ] Gera√ß√£o e envio de c√≥digos por email
  - [ ] Ativa√ß√£o de conta via c√≥digo
  - [ ] Login por c√≥digo (sem senha)
  - [ ] JWT token generation e middleware
- [ ] **M√≥dulo de Usu√°rios**
  - [ ] CRUD de usu√°rios
  - [ ] Gest√£o de perfis com WhatsApp
  - [ ] Status de ativa√ß√£o da conta
  - [ ] Controle de pap√©is e permiss√µes
- [ ] **Sistema de Verifica√ß√£o**
  - [ ] Email Worker para c√≥digos de ativa√ß√£o
  - [ ] Email Worker para c√≥digos de login
  - [ ] Valida√ß√£o e expira√ß√£o de c√≥digos
  - [ ] Rate limiting para envio de c√≥digos
- [ ] **Testes e Documenta√ß√£o**
  - [ ] Testes unit√°rios para autentica√ß√£o
  - [ ] Testes de integra√ß√£o do fluxo completo
  - [ ] Documenta√ß√£o Swagger dos endpoints

## üìã Fase 3 ‚Äì Upload e Armazenamento (2-3 semanas)
- [ ] Integra√ß√£o com MinIO
- [ ] Sistema de upload de arquivos PDF
- [ ] Valida√ß√£o e metadados de arquivos
- [ ] URLs tempor√°rias com expira√ß√£o
- [ ] Organiza√ß√£o hier√°rquica por usu√°rio
- [ ] APIs de gest√£o de arquivos
- [ ] Testes de upload e storage

## üìã Fase 4 ‚Äì Workers e Processamento (3-4 semanas)
- [ ] Configura√ß√£o RabbitMQ
- [ ] Email Worker para notifica√ß√µes
- [ ] Knowledge Worker para processamento de PDFs
- [ ] Sistema de retry e dead-letter queues
- [ ] Monitoramento de filas
- [ ] M√©tricas de performance
- [ ] Logs estruturados

## üìã Fase 5 ‚Äì Knowledge Base e IA (4-5 semanas)
- [ ] **CRUD de Knowledge Base**
  - [ ] POST /user/knowledge-base (criar com nome + descri√ß√£o)
  - [ ] GET /user/knowledge-base (listar todas do usu√°rio)
  - [ ] GET /user/knowledge-base/:id (buscar por ID)
  - [ ] DELETE /user/knowledge-base/:id (excluir base)
- [ ] **Upload e Gest√£o de Arquivos**
  - [ ] POST /user/files/upload (upload para MinIO + metadados MongoDB)
  - [ ] GET /user/files (listar arquivos do usu√°rio)
  - [ ] DELETE /user/files/:fileId (remover do MinIO + MongoDB)
  - [ ] Organiza√ß√£o hier√°rquica por usu√°rio no MinIO
- [ ] **API de Processamento**
  - [ ] POST /user/knowledge-base/:id/start-process (iniciar processamento)
  - [ ] Sistema de fila RabbitMQ (userId, knowledgeBaseId, fileId)
  - [ ] Status tracking (pending ‚Üí processing ‚Üí completed/failed)
- [ ] **Knowledge Worker e IA**
  - [ ] Integra√ß√£o OpenAI para embeddings
  - [ ] Sistema de chunking de documentos
  - [ ] Indexa√ß√£o sem√¢ntica
  - [ ] Processamento ass√≠ncrono via RabbitMQ
- [ ] **MongoDB + Mongoose**
  - [ ] Schemas para KnowledgeBase, File, Document
  - [ ] Relacionamentos entre entidades
  - [ ] √çndices para performance
  - [ ] Valida√ß√µes e constraints

## üìã Fase 6 ‚Äì Chatbots e Conversas (3-4 semanas)
- [ ] CRUD de chatbots
- [ ] Integra√ß√£o OpenAI para chat completion
- [ ] Sistema de conversas e hist√≥rico
- [ ] Chatbot Worker para processamento
- [ ] Configura√ß√µes avan√ßadas (temperatura, tokens)
- [ ] Vincula√ß√£o com knowledge base
- [ ] APIs de chat em tempo real

## üìã Fase 7 ‚Äì Perfis e Administra√ß√£o (2-3 semanas)
- [ ] Sistema de perfis de usu√°rio
- [ ] Configura√ß√µes e prefer√™ncias
- [ ] M√≥dulo administrativo
- [ ] Gest√£o de usu√°rios para admins
- [ ] Relat√≥rios e m√©tricas b√°sicas
- [ ] Configura√ß√µes do sistema

## üìã Fase 8 ‚Äì Monitoramento e Deploy (2-3 semanas)
- [ ] Implementa√ß√£o Prometheus + Grafana
- [ ] Alertas autom√°ticos
- [ ] Health checks avan√ßados
- [ ] Configura√ß√£o para produ√ß√£o
- [ ] Scripts de deploy
- [ ] Documenta√ß√£o completa
- [ ] Testes E2E

# Logical Dependency Chain a Implementar

## üöÄ Setup Inicial (Semana 1)
1. [ ] Cria√ß√£o do reposit√≥rio Git
2. [ ] Inicializa√ß√£o projeto NestJS
3. [ ] Configura√ß√£o TypeScript e ESLint
4. [ ] Setup Docker Compose local
5. [ ] Configura√ß√£o vari√°veis ambiente

## üìã Infraestrutura Base (Semana 2)
6. [ ] Configura√ß√£o MongoDB local
7. [ ] Setup Redis para cache
8. [ ] Configura√ß√£o RabbitMQ
9. [ ] Setup MinIO local
10. [ ] Testes de conectividade

## üîê Autentica√ß√£o (Semana 3-4)
11. [ ] Value Objects (Email e WhatsApp) com valida√ß√µes
12. [ ] Use cases: Register, Activate, Login, VerifyLogin  
13. [ ] Sistema de gera√ß√£o e valida√ß√£o de c√≥digos
14. [ ] Email Workers para envio de c√≥digos
15. [ ] JWT middleware para prote√ß√£o de rotas
16. [ ] Rate limiting para preven√ß√£o de spam
17. [ ] Testes unit√°rios e integra√ß√£o

## üìÅ Upload e Storage (Semana 5-6)
16. [ ] Integra√ß√£o MinIO
17. [ ] Upload de arquivos
18. [ ] Valida√ß√£o e metadados
19. [ ] APIs de gest√£o
20. [ ] Testes de integra√ß√£o

## ‚öôÔ∏è Workers (Semana 7-9)
21. [ ] RabbitMQ workers base
22. [ ] Email worker
23. [ ] Sistema retry/dead-letter
24. [ ] Monitoramento
25. [ ] Logs estruturados

## ü§ñ IA e Knowledge (Semana 10-13)
26. [ ] **CRUD Knowledge Base** com MongoDB/Mongoose
27. [ ] **Upload de arquivos** para MinIO + metadados
28. [ ] **API start-process** para iniciar processamento
29. [ ] **Fila RabbitMQ** (userId, knowledgeBaseId, fileId)
30. [ ] **Knowledge Worker** para processamento
31. [ ] **Integra√ß√£o OpenAI** para embeddings
32. [ ] **Sistema de chunking** de documentos
33. [ ] **Indexa√ß√£o sem√¢ntica** e busca por similaridade
34. [ ] **Exclus√£o de arquivos** do MinIO + MongoDB

## üí¨ Chatbots (Semana 14-16)
35. [ ] CRUD chatbots
36. [ ] Chat completion
37. [ ] Sistema conversas
38. [ ] Vincula√ß√£o knowledge
39. [ ] APIs tempo real

## üë§ Perfis e Admin (Semana 17-19)
40. [ ] Sistema perfis
41. [ ] M√≥dulo admin
42. [ ] Gest√£o usu√°rios
43. [ ] Configura√ß√µes
44. [ ] Relat√≥rios b√°sicos

## üìä Monitoramento (Semana 20-22)
45. [ ] M√©tricas avan√ßadas
46. [ ] Alertas autom√°ticos
47. [ ] Deploy produ√ß√£o
48. [ ] Documenta√ß√£o final
49. [ ] Testes E2E

# Especifica√ß√µes T√©cnicas

## üõ†Ô∏è Stack Tecnol√≥gico
- **Backend**: Node.js 20+ com NestJS
- **Database**: MongoDB 6+ com Mongoose
- **Cache**: Redis 7+
- **Queue**: RabbitMQ 3.12+
- **Storage**: MinIO para arquivos
- **IA**: OpenAI API (GPT-4, Embeddings)
- **Auth**: JWT com refresh tokens
- **Logs**: Winston com rota√ß√£o
- **Tests**: Jest + Supertest
- **Deploy**: Docker + Docker Compose

## üìÅ Estrutura do Projeto
```
src/
‚îú‚îÄ‚îÄ config/             # Configura√ß√µes
‚îú‚îÄ‚îÄ core/              # Clean Architecture
‚îÇ   ‚îú‚îÄ‚îÄ domain/       # Entidades e regras
‚îÇ   ‚îú‚îÄ‚îÄ application/  # Use cases
‚îÇ   ‚îî‚îÄ‚îÄ infrastructure/ # Implementa√ß√µes
‚îú‚îÄ‚îÄ modules/          # M√≥dulos funcionais
‚îÇ   ‚îú‚îÄ‚îÄ auth/        # Autentica√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ users/       # Usu√°rios
‚îÇ   ‚îú‚îÄ‚îÄ chatbots/    # Chatbots
‚îÇ   ‚îú‚îÄ‚îÄ knowledge/   # Bases conhecimento
‚îÇ   ‚îú‚îÄ‚îÄ dataset/     # Upload arquivos
‚îÇ   ‚îî‚îÄ‚îÄ profile/     # Perfis usu√°rio
‚îú‚îÄ‚îÄ workers/         # Workers ass√≠ncronos
‚îú‚îÄ‚îÄ shared/          # C√≥digo compartilhado
‚îî‚îÄ‚îÄ tests/           # Testes
```

## üîß Configura√ß√µes Ambiente
- Vari√°veis ambiente para todas as integra√ß√µes
- Configura√ß√£o Docker para desenvolvimento
- Scripts npm para diferentes ambientes
- Healthchecks para todos os servi√ßos
- Logs estruturados com n√≠veis apropriados

## üîí Considera√ß√µes de Seguran√ßa para Fluxo sem Senha
- **C√≥digos Tempor√°rios**: Expira√ß√£o em 5 minutos
- **Rate Limiting**: M√°ximo 3 tentativas por minuto por email
- **Blacklist**: Bloqueio tempor√°rio ap√≥s 5 tentativas falhas
- **Valida√ß√£o de Email**: Verifica√ß√£o de formato e dom√≠nio
- **Valida√ß√£o de WhatsApp**: Formato internacional obrigat√≥rio
- **JWT Security**: Tokens com expira√ß√£o curta (15 min) e refresh tokens
- **Logs de Seguran√ßa**: Auditoria de tentativas de login e c√≥digos
- **IP Tracking**: Monitoramento de IPs suspeitos

# Pr√≥ximos Passos Imediatos

1. **Setup Ambiente** (Dia 1-2)
   - [ ] Inicializar reposit√≥rio
   - [ ] Configurar NestJS base
   - [ ] Setup Docker Compose
   - [ ] Configurar vari√°veis ambiente

2. **Estrutura Base** (Dia 3-5)
   - [ ] Implementar Clean Architecture
   - [ ] Configurar banco de dados
   - [ ] Setup sistema de logs
   - [ ] Configurar testes

3. **Primeiro Endpoint** (Dia 6-7)
   - [ ] Health check endpoint
   - [ ] Documenta√ß√£o Swagger
   - [ ] Middleware b√°sico
   - [ ] Primeiro teste E2E

4. **Sistema Autentica√ß√£o sem Senha** (Semana 2)
   - [ ] Value Objects para Email e WhatsApp
   - [ ] Use cases: Register, Activate, Login, VerifyLogin
   - [ ] Sistema de c√≥digos tempor√°rios
   - [ ] Email Workers para envio
   - [ ] JWT middleware e prote√ß√£o
   - [ ] Rate limiting e seguran√ßa
   - [ ] Testes unit√°rios completos

5. **Integra√ß√£o MinIO** (Semana 3)
   - [ ] Upload arquivos
   - [ ] Valida√ß√µes
   - [ ] URLs tempor√°rias
   - [ ] Testes integra√ß√£o
